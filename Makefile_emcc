CC = emcc
LD = $(CC)
# CCFLAGS = -O2 --closure 0 -s EXPORTED_FUNCTIONS="['_perl_eval', '_main']" -s VERBOSE=1 -std=gnu89 -Wno-error-implicit-function-declaration
# CCFLAGS = -g --closure 0 -s EXPORTED_FUNCTIONS="['_perl_eval', '_main']" -s VERBOSE=1 -std=gnu89 -Wno-error-implicit-function-declaration
CCFLAGS = -g --closure 0 -s EXPORTED_FUNCTIONS="['_perl_eval', '_main']" -s VERBOSE=1 -s TOTAL_MEMORY=1000000000 -std=gnu89
MICROPERL_JS_OUT = plu.js
FIXED_MICROPERL_JS_OUT = microperl.js
MINIPERLMAIN = miniperlmain.c

ifeq ($(CONSOLE),1)
	MICROPERL_JS_OUT = plu.console.js
	MINIPERLMAIN = miniperlmain_bak.c
	CCFLAGS = $(DEBUG_FLAGS)
else
endif

# DEFINES = -DPERL_CORE -DPERL_MICRO -DSTANDARD_C -DPERL_USE_SAFE_PUTENV -DNO_MATHOMS
DEFINES = -DPERL_CORE -DSTANDARD_C -DPERL_USE_SAFE_PUTENV -DNO_MATHOMS
OPTIMIZE =
CFLAGS = $(DEFINES) $(OPTIMIZE)
LDFLAGS = $(CCFLAGS)
LIBS = -lm
_O = .o
ENV = env
PERL = perl
_X =
RUN =

all:	plu

include common1.mak

WEB_REPL_FIXED_MICROPERL_JS_OUT = web_repl/js/$(FIXED_MICROPERL_JS_OUT)

$(FIXED_MICROPERL_JS_OUT): $(MICROPERL_JS_OUT)
	# perl patch-plu-js.pl $< $@
	cp -f $< $@

$(WEB_REPL_FIXED_MICROPERL_JS_OUT): $(FIXED_MICROPERL_JS_OUT)
	cp -f $< $@

define EMBED
$(shell perl emcc-embed-munge.pl "$1" /usr/local/lib/perl5/5.20 `find "$1" -name '*.pm'`)
endef

$(MICROPERL_JS_OUT): $(O)
	$(LD) -o $(MICROPERL_JS_OUT) --pre-js microperl-pre.js $(call EMBED,dist/constant/lib) $(call EMBED,cpan/Getopt-Long/lib) $(call EMBED,lib) $(O) $(LDFLAGS) $(LIBS)

plu: $(MICROPERL_JS_OUT) $(FIXED_MICROPERL_JS_OUT) $(WEB_REPL_FIXED_MICROPERL_JS_OUT)

ubitcount.h: ugenerate_uudmap$(_X)
	./ugenerate_uudmap$(_X) $(generated_headers)

ugenerate_uudmap: generate_uudmap.c
	gcc -o ugenerate_uudmap $(CFLAGS) -lm generate_uudmap.c

plutest: plu
	- cd t && (rm -f perl; ln -s ../plu perl) \
	  && ./perl -I../lib TEST base/*.t cmd/*.t

# That's it, folks!
